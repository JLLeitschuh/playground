// create new task
task helloWorld {
    group = 'Playground'
}
helloWorld << {
    println 'Hello world.'
}

// word1 and word2 are params passed with -P or --project-prop flags
// gradle showArgs -Pword1=hello --project-prop word2=world
task showArgs {
    group = 'Playground'
}
showArgs << {
    println "$word1 $word2"
}

task first << {
    println 'first'
}

// with -x or --exclude-task you can exclude dependent tasks from run
// gradle second -x first
task second(dependsOn: [first]) {
    group = 'Playground'
}
second << {
    println 'second'
}

// continuous build is available from version 2.5 and is run with 'gradle -t <task name>'
// gradle -t test

// to profile tasks execution you can use --profile flag
// gradle --profile test

// you can load properties from external groovy files or from gradle.properties
// gradle -Penv=test printProps

loadConfiguration()

task printProps << {
    println "serverName:      $config.serverName"
    println "mail.server:     $config.mail.server"
    println "mail.port:       $config.mail.port"
    println "system.property: ${System.properties['system.property']}"
    println "simple.property: ${project['simple.property']}"
}
configure(printProps) {
    group = 'Playground'
}

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'dev'
    project.ext.set 'environment', environment
    println "Environment is set to $environment"

    def configFile = file('externalConfig.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    project.ext.set 'config', config
}

ext {
    outputFile = file("$buildDir/version.txt")
}

task generateVersionFile << {
    if (!outputFile.isFile()) {
        outputFile.parentFile.mkdirs()
        outputFile.createNewFile()
    }
    outputFile.write "Version: $version"
}
configure(generateVersionFile) {
    group = 'Playground'
    inputs.property "version", version
    outputs.files outputFile
}

task showContents << {
    println outputFile.text
}
configure(showContents) {
    group = 'Playground'
}
showContents.dependsOn generateVersionFile

task generateFileWithProperty(type: Generate) {
    group = 'Playground'
    testProperty = '2.0'
    outputFile = file("$project.buildDir/property.txt")
}

task showProperty {
    group = 'Playground'
}
showProperty << {
    println generateFileWithProperty.outputFile.text
}
showProperty.dependsOn generateFileWithProperty

class Generate extends DefaultTask {

    @Input
    String testProperty

    @OutputFile
    File outputFile

    @TaskAction
    void generate() {
        def file = getOutputFile()
        if (!file.isFile()) {
            file.parentFile.mkdirs()
            file.createNewFile()
        }
        file.write "Property: $testProperty"
    }
}

import org.apache.tools.ant.filters.*
task('filterCopy', type: Copy) {
    from 'src/main/resources/templates'
    into buildDir
    include '**/*.txt'
    filter { line ->
        line.contains('Gradle') ? line : ''
    }
    filter (ReplaceTokens, tokens: [
            author: 'kuvaldis',
            gradleVersion: gradle.gradleVersion
    ])
    filter (ConcatFilter, prepend: file('src/main/resources/include/header.txt'))
    rename ~/(.*).template.(.*)/, '$1.$2' // rename with groovy regex
}

// duplicate files strategy
// will perform copy but with a console message:
// 'Encountered duplicate path "copy.txt" during copy operation configured with DuplicatesStrategy.WARN'
task copyDuplicatesStrategyWarn(type: Copy) {
    from 'src/main/resources/copy1'
    from 'src/main/resources/copy2'
    into "$buildDir/copy"
    duplicatesStrategy = DuplicatesStrategy.WARN
}

// live collections are created with filter() or matching() methods
task allCompile << {
    println 'All compile'
}
// findAll doesn't return a live collection, so it's basically empty
allCompile.dependsOn project.tasks.findAll {
    it.name.startsWith('compile')
}
task allCompile2 << {
    println 'All compile version 2'
}
// if findAll is used inside dependsOn closure param, then it'll be called before execution
// so in this particular case it emulates live collection effect
allCompile2.dependsOn {
    project.tasks.findAll {
        it.name.startsWith('compile')
    }
}
task allCopy << {
    println 'All copy'
}
// matching returns a live collection, so even if there is no copy tasks right now, there will be some
// if we add them later
allCopy.dependsOn project.tasks.matching {
    it.name.startsWith('copy')
}
5.times {
    task "compile$it" << {
        println 'Compile...'
    }
    task "copy$it" << {
        println 'Copy...'
    }
}

// from java plugin you can create a checksum file for jar
apply plugin: 'java'
archivesBaseName = 'gradle-play'
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: 'javadoc') { // javadoc from java plugin
    from javadoc.destinationDir
    classifier = 'javadoc'
}
artifacts {
    archives sourceJar, javadocJar
}
// adds a checksum files for each file created from Zip tasks
tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum file: it.archivePath
    }
}

// extend configuration
configurations {
    // means provided is an extension of runtime
    provided.extendsFrom compile
    cxf // no parent, just a config
}
ext {
    cxfVersion = '2.6.2'
    cxfArtifacts = [
            'cxf-tools-wsdlto-frontend-jaxws',
            'cxf-tools-wsdlto-databinding-jaxb',
            'cxf-tools-common',
            'cxf-tools-wsdlto-core'
    ]
}
dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    // only for provided configuration, so neither compile nor runtime has this dependency
    provided 'ch.qos.logback:logback-classic:1.1.2'
    // all the cxf artifacts are added as dependencis for cxf config
    cxfArtifacts.each { artifact ->
        cxf "org.apache.cxf:$artifact:$cxfVersion"
    }
}
// generates java classes from wsdl
task wsdl2java(type: JavaExec) {
    ext {
        wsdlFile = 'src/wsdl/service-contract.wsdl'
        outputDir = file("$buildDir/generated/cxf")
    }
    inputs.file file(wsdlFile)
    outputs.dir outputDir
    // Main Java class to invoke.
    main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'

    // Set classpath to dependencies assigned
    // to the cxf configuration, so no other dependencies are included
    classpath = configurations.cxf

    // Arguments to be passed to WSDLToJava.
    args '-d', outputDir
    args '-client'
    args '-verbose'
    args '-validate'
    args wsdlFile
}

// test output enable
test {
    testLogging {
        // enables output from standard out or error streams
        showStandardStreams = true
        // start/passed events
        events 'started', 'passed'
    }
}