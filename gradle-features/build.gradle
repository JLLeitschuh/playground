// create new task
task helloWorld {
    group = 'Playground'
}
helloWorld << {
    println 'Hello world.'
}

// word1 and word2 are params passed with -P or --project-prop flags
// gradle showArgs -Pword1=hello --project-prop word2=world
task showArgs {
    group = 'Playground'
}
showArgs << {
    println "$word1 $word2"
}

task first << {
    println 'first'
}

// with -x or --exclude-task you can exclude dependent tasks from run
// gradle second -x first
task second(dependsOn: [first]) {
    group = 'Playground'
}
second << {
    println 'second'
}

// continuous build is available from version 2.5 and is run with 'gradle -t <task name>'
// gradle -t test

// to profile tasks execution you can use --profile flag
// gradle --profile test

// you can load properties from external groovy files or from gradle.properties
// gradle -Penv=test printProps

loadConfiguration()

task printProps << {
    println "serverName:      $config.serverName"
    println "mail.server:     $config.mail.server"
    println "mail.port:       $config.mail.port"
    println "system.property: ${System.properties['system.property']}"
    println "simple.property: ${project['simple.property']}"
}
configure(printProps) {
    group = 'Playground'
}

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'dev'
    project.ext.set 'environment', environment
    println "Environment is set to $environment"

    def configFile = file('externalConfig.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    project.ext.set 'config', config
}

ext {
    outputFile = file("$buildDir/version.txt")
}

task generateVersionFile << {
    if (!outputFile.isFile()) {
        outputFile.parentFile.mkdirs()
        outputFile.createNewFile()
    }
    outputFile.write "Version: $version"
}
configure(generateVersionFile) {
    group = 'Playground'
    inputs.property "version", version
    outputs.files outputFile
}

task showContents << {
    println outputFile.text
}
configure(showContents) {
    group = 'Playground'
}
showContents.dependsOn generateVersionFile

task generateFileWithProperty(type: Generate) {
    group = 'Playground'
    testProperty = '2.0'
    outputFile = file("$project.buildDir/property.txt")
}

task showProperty {
    group = 'Playground'
}
showProperty << {
    println generateFileWithProperty.outputFile.text
}
showProperty.dependsOn generateFileWithProperty

class Generate extends DefaultTask {

    @Input
    String testProperty

    @OutputFile
    File outputFile

    @TaskAction
    void generate() {
        def file = getOutputFile()
        if (!file.isFile()) {
            file.parentFile.mkdirs()
            file.createNewFile()
        }
        file.write "Property: $testProperty"
    }
}

import org.apache.tools.ant.filters.*
task('filterCopy', type: Copy) {
    from 'src/main/resources/templates'
    into buildDir
    include '**/*.txt'
    filter { line ->
        line.contains('Gradle') ? line : ''
    }
    filter (ReplaceTokens, tokens: [
            author: 'kuvaldis',
            gradleVersion: gradle.gradleVersion
    ])
    filter (ConcatFilter, prepend: file('src/main/resources/include/header.txt'))
    rename ~/(.*).template.(.*)/, '$1.$2' // rename with groovy regex
}

// duplicate files strategy
// will perform copy but with a console message:
// 'Encountered duplicate path "copy.txt" during copy operation configured with DuplicatesStrategy.WARN'
task copyDuplicatesStrategyWarn(type: Copy) {
    from 'src/main/resources/copy1'
    from 'src/main/resources/copy2'
    into "$buildDir/copy"
    duplicatesStrategy = DuplicatesStrategy.WARN
}